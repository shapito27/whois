<?php

namespace Shapito27\Tests;

use PHPUnit\Framework\TestCase;

class DbOpenTest extends TestCase
{
    private const DB_PATH = __DIR__.'/../db/';

    public function testIsDirExists(): void
    {
        self::assertFileExists(self::DB_PATH);
    }

    public function testIsCreationDateSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'creation_date_synonyms.json');
    }

    public function testIsCreationDateSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'creation_date_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }

    public function testIsUpdateDateSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'update_date_synonyms.json');
    }

    public function testIsUpdateDateSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'update_date_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }

    public function testIsExpiryDateSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'expiry_date_synonyms.json');
    }

    public function testIsExpiryDateSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'expiry_date_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }

    public function testIsNameServersSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'name_server_synonyms.json');
    }

    public function testIsNameServersSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'name_server_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }

    public function testIsDomainNotFoundSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'domain_not_found_synonyms.json');
    }

    public function testIsDomainNotFoundSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'domain_not_found_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }

    public function testIsRegistrarSynonymsFileExists()
    {
        self::assertFileExists(self::DB_PATH.'registrar_synonyms.json');
    }

    public function testIsRegistrarSynonymsJsonEncodedToArray()
    {
        $jsonDecodedToArray = json_decode(file_get_contents(self::DB_PATH.'registrar_synonyms.json'), true);
        self::assertIsArray($jsonDecodedToArray);
        self::assertArrayHasKey('values', $jsonDecodedToArray);
        self::assertIsArray($jsonDecodedToArray, 'values');
    }
}
